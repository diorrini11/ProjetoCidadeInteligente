Index: app/src/main/java/com/example/projetocidadeinteligente/MapsActivity.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.projetocidadeinteligente\r\n\r\nimport android.content.Context\r\nimport android.content.Intent\r\nimport android.content.SharedPreferences\r\nimport android.content.pm.PackageManager\r\nimport android.location.Geocoder\r\nimport android.location.Location\r\nimport androidx.appcompat.app.AppCompatActivity\r\nimport android.os.Bundle\r\nimport android.util.Log\r\nimport android.view.Menu\r\nimport android.view.MenuInflater\r\nimport android.view.MenuItem\r\nimport android.widget.TextView\r\nimport android.widget.Toast\r\nimport androidx.core.app.ActivityCompat\r\nimport com.example.projetocidadeinteligente.api.EndPoints\r\nimport com.example.projetocidadeinteligente.api.Ponto\r\nimport com.example.projetocidadeinteligente.api.ServiceBuilder\r\nimport com.google.android.gms.location.*\r\n\r\nimport com.google.android.gms.maps.CameraUpdateFactory\r\nimport com.google.android.gms.maps.GoogleMap\r\nimport com.google.android.gms.maps.OnMapReadyCallback\r\nimport com.google.android.gms.maps.SupportMapFragment\r\nimport com.google.android.gms.maps.model.LatLng\r\nimport com.google.android.gms.maps.model.MarkerOptions\r\nimport retrofit2.Call\r\nimport retrofit2.Callback\r\nimport retrofit2.Response\r\n\r\nclass MapsActivity : AppCompatActivity(), OnMapReadyCallback {\r\n\r\n    private lateinit var mMap: GoogleMap\r\n    private lateinit var pontos: List<Ponto>\r\n    private lateinit var lastLocation: Location\r\n    private lateinit var fusedLocationClient: FusedLocationProviderClient\r\n    private lateinit var locationCallback: LocationCallback\r\n    private lateinit var locationRequest: LocationRequest\r\n    private var estgLat: Double = 0.0\r\n    private var estgLong: Double = 0.0\r\n\r\n    override fun onCreate(savedInstanceState: Bundle?) {\r\n        super.onCreate(savedInstanceState)\r\n        setContentView(R.layout.activity_maps)\r\n\r\n        estgLat = 41.6935\r\n        estgLong = -8.8467\r\n\r\n        // Obtain the SupportMapFragment and get notified when the map is ready to be used.\r\n        val mapFragment = supportFragmentManager\r\n            .findFragmentById(R.id.map) as SupportMapFragment\r\n        mapFragment.getMapAsync(this)\r\n\r\n        val request = ServiceBuilder.buildService(EndPoints::class.java)\r\n        val call = request.getAllPontos()\r\n\r\n        call.enqueue(object : Callback<List<Ponto>> {\r\n            override fun onResponse(call: Call<List<Ponto>>, response: Response<List<Ponto>>) {\r\n                if (response.isSuccessful) {\r\n                    pontos = response.body()!!\r\n\r\n                    for (ponto in pontos) {\r\n                        mMap.addMarker(\r\n                            MarkerOptions().position(\r\n                                LatLng(\r\n                                    ponto.lat.toDouble(),\r\n                                    ponto.long.toDouble()\r\n                                )\r\n                            ).title(ponto.titulo)\r\n                        )\r\n                    }\r\n                }\r\n            }\r\n            override fun onFailure(call: Call<List<Ponto>>, t: Throwable)\r\n            {\r\n                Toast.makeText(this@MapsActivity, \"${t.message}\", Toast.LENGTH_SHORT).show()\r\n            }\r\n        })\r\n\r\n        fusedLocationClient = LocationServices.getFusedLocationProviderClient(this)\r\n\r\n        locationCallback = object : LocationCallback() {\r\n            override fun onLocationResult(p0: LocationResult)\r\n            {\r\n                super.onLocationResult(p0)\r\n                lastLocation = p0.lastLocation\r\n                var location = LatLng(lastLocation.latitude, lastLocation.longitude)\r\n\r\n                mMap.moveCamera(CameraUpdateFactory.newLatLngZoom(location, 15F))\r\n\r\n                findViewById<TextView>(R.id.txtcoordenadas).setText(\r\n                    \"Lat: \" + location.latitude +\r\n                    \" - Long: \" + location.longitude)\r\n\r\n                val address = getAddress(lastLocation.latitude, lastLocation.longitude)\r\n                findViewById<TextView>(R.id.txtmorada).setText(\"Morada: \" + address)\r\n\r\n                findViewById<TextView>(R.id.txtdistancia).setText(\r\n                    \"DistÃ¢ncia: \" + calculateDistance(\r\n                        lastLocation.latitude, lastLocation.longitude,\r\n                        estgLat, estgLong\r\n                    ).toString() + \" metros\"\r\n                )\r\n            }\r\n        }\r\n\r\n        createLocationRequest()\r\n    }\r\n\r\n    override fun onMapReady(googleMap: GoogleMap) {\r\n        mMap = googleMap\r\n    }\r\n\r\n    companion object {\r\n        // add to implement last known location\r\n        private const val LOCATION_PERMISSION_REQUEST_CODE = 1\r\n        //added to implement location periodic updates\r\n        private const val REQUEST_CHECK_SETTINGS = 2\r\n    }\r\n\r\n    private fun startLocationUpdates() {\r\n        if(ActivityCompat.checkSelfPermission(this,\r\n                android.Manifest.permission.ACCESS_FINE_LOCATION) != PackageManager.PERMISSION_GRANTED)\r\n        {\r\n            ActivityCompat.requestPermissions(this,\r\n                arrayOf(android.Manifest.permission.ACCESS_FINE_LOCATION),\r\n                LOCATION_PERMISSION_REQUEST_CODE)\r\n            return\r\n        }\r\n        fusedLocationClient.requestLocationUpdates(locationRequest, locationCallback, null /* Looper */)\r\n    }\r\n\r\n    private fun createLocationRequest() {\r\n        locationRequest = LocationRequest()\r\n        locationRequest.interval = 3000\r\n        locationRequest.priority = LocationRequest.PRIORITY_HIGH_ACCURACY\r\n    }\r\n\r\n    private fun getAddress(lat: Double, lng: Double): String {\r\n        val geocoder = Geocoder(this)\r\n        val list = geocoder.getFromLocation(lat, lng, 1)\r\n        return list[0].getAddressLine(0)\r\n    }\r\n\r\n    fun calculateDistance(lat1: Double, lng1: Double, lat2: Double, lng2: Double): Float {\r\n        val results = FloatArray(1)\r\n        Location.distanceBetween(lat1, lng1, lat2, lng2, results)\r\n        return results[0]\r\n    }\r\n\r\n    override fun onCreateOptionsMenu(menu: Menu): Boolean\r\n    {\r\n        val inflater: MenuInflater = menuInflater\r\n        inflater.inflate(R.menu.menu_mapa, menu)\r\n        return true\r\n    }\r\n\r\n    override fun onOptionsItemSelected(item: MenuItem): Boolean\r\n    {\r\n        return when (item.itemId)\r\n        {\r\n            R.id.optionAdd ->\r\n            {\r\n                /*val intent = Intent(this@NotasActivity, AddNota::class.java)\r\n                startActivityForResult(intent, newNotaActivityRequestCode)*/\r\n                true\r\n            }\r\n            R.id.optionLogout ->\r\n            {\r\n                val sharedPref: SharedPreferences = getSharedPreferences(\r\n                    getString(R.string.sharedPref), Context.MODE_PRIVATE)\r\n                with (sharedPref.edit()) {\r\n                    putString(\"User_Key\", null)\r\n                    putString(\"Pass_Key\", null)\r\n                    apply()\r\n                }\r\n                finish()\r\n                true\r\n            }\r\n            else -> super.onOptionsItemSelected(item)\r\n        }\r\n    }\r\n\r\n    override fun onPause() {\r\n        super.onPause()\r\n        fusedLocationClient.removeLocationUpdates(locationCallback)\r\n    }\r\n\r\n    public override fun onResume() {\r\n        super.onResume()\r\n        startLocationUpdates()\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/example/projetocidadeinteligente/MapsActivity.kt	(revision f8dd9d27b53055d0ad4b39a72ce746f92e4a8f78)
+++ app/src/main/java/com/example/projetocidadeinteligente/MapsActivity.kt	(date 1626118623616)
@@ -41,6 +41,8 @@
     private var estgLat: Double = 0.0
     private var estgLong: Double = 0.0
 
+    private val newPontoActivityRequestCode = 1
+
     override fun onCreate(savedInstanceState: Bundle?) {
         super.onCreate(savedInstanceState)
         setContentView(R.layout.activity_maps)
@@ -163,8 +165,8 @@
         {
             R.id.optionAdd ->
             {
-                /*val intent = Intent(this@NotasActivity, AddNota::class.java)
-                startActivityForResult(intent, newNotaActivityRequestCode)*/
+                /*val intent = Intent(this@MapsActivity, AddPonto::class.java)
+                startActivityForResult(intent, newPontoActivityRequestCode)*/
                 true
             }
             R.id.optionLogout ->
